조회한 결과 파일로 내보내기
	내가 선택해서 조회한 데이터 결과를 파일로 저장하는 방법

	조회결과 그리드 우클릭 > 데이터 추출 > 원하는 파일 형식 선택(CSV : comma-seperated values) > Output에서 저장 경로를 변경 > 파일 이름 변경 후 저장

DISTINCT 
	- 해당 컬럼에서 중복되는 값을 제외

ORDER BY
	- 데이터를 지정된 컬럼으로 정렬하고 싶을 때 사용

ALIAS(AS)
	- 값에 별칭을 주어 접근을 별칭 형태로 할 수 있도록 하는 역할
	- Alias는 보통 AS라는 키워드를 통해 별칭을 지정하지만, 띄어쓰기만으로도 별칭을 지정할 수 있다. (생략 가능)

문법
	SELECT [DISTINCT] 컬럼명 [AS "별칭"], 컬럼명 [AS "별칭"], ...
	FROM 테이블명
	[ORDER BY 컬럼명 [ASC or DESC]];

자료형(TYPE) : 값의 종류
	1. 문자 : CHAR / VARCHAR2
	2. 숫자 : NUMBER
	3. 날짜 : DATE
연산자
	연산자 피연산자 자리에 어떤 타입의 값이 오는지,
	연산자가 어떻게 작동하는지,
	연산의 결과가 어떤 타입의 값인지 아는 것이 중요하다.

	1. 연결 연산자
		a || b (concatenation, 연쇄) : a와 b를 연결해준다.

		숫자, 문자, 날짜 타입이 피연산자 자리에 올 수 있으며
		앞에 있는 값과 뒤에 있는 값을 연결한다.
		연결의 결과는 문자타입이다.

	2. 산술 연산자
		+, -, *, /
		피연산자에 숫자 타입을 사용한다.
		연산의 결과는 숫자 타입이다.

		+, -는 날짜 타입도 가능하다.
		날짜와 숫자 간의 +,- 연산의 결과는 날짜 타입이다.
		날짜와 날짜간의 - 연산의 결과는 숫자 타입이다.

	3. 관계(비교) 연산자
		a > b : a가 b보다 크다(초과)
		a < b : a가 b보다 작다(미만)
		a >= b : a가 b보다 크거나 같다(이상)
		a <= b : a가 b보다 작거나 같다(이하)
		a = b : a와 b가 같다
		a <> b, a != b : a와 b가 다르다(같지 않다)
			(sql에서는 <> 이 표준이다.)

	4. SQL 연산자
		- BETWEEN a AND b 	: a 이상 b 이하인 조건 
		- IN(a, b, c, ...)	: a 혹은 b 혹은 c ...일 조건 > 정확히 일치
		- LIKE			: 주로 문자 포함 조건을 만들 때 사용
					% : 아무거나
					__ : 자리수
		- IS NULL, IS NOT NULL	
			IS NULL		: NULL 값이 들어있는지 검사
			IS NOT NULL	: NULL이 아닌 값 검사
		- 비교연산자	
			ANY, ALL

	5. 논리 연산자
		여러 개의 조건을 연결할 때 사용
		- AND
		- OR
		- NOT

WHERE
	원하는 행을 조회하거나 연산처리한다.

문법
	SELECT 컬럼명
	FROM 테이블명
	WHERE 조건;