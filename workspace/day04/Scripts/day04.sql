/* 이미 만들어진 테이블에 제약 조건 추가 */
ALTER TABLE TBL_CAR ADD CONSTRAINT PK_CAR PRIMARY KEY (CAR_NUMBER);

/* 
 * ALTER TABLE TBL_CAR : 테이블을 수정하겠다 TBL_CAR 테이블
 * ADD CONSTRAINT : 제약 조건을 추가한다
 * PK_CAR : 제약 조건 이름
 * PRIMARY KEY (CAR_NUMBER) : PK라는 제약조건을 (CAR_NUMBER) 컬럼에
 * */
DROP TABLE TBL_ANIMAL;
/*테이블 만들면서 PK 제약조건 이름까지 설정하기*/
CREATE TABLE TBL_CAR(
   CAR_NUMBER NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
   CAR_NAME VARCHAR2(1000),
   CAR_BRAND VARCHAR2(1000),
   CAR_RELEASE_DATE DATE,
   CAR_COLOR VARCHAR2(1000),
   CAR_PRICE NUMBER
);

DROP TABLE TBL_CAR

/*실습*/
/*
 * 동물테이블 생성
 * -고유번호
 * -종류
 * -나이
 * -먹이*/
DROP TABLE TBL_ANIMAL;
CREATE TABLE TBL_ANIMAL(
	ANIMAL_NUMBER NUMBER,
	ANIMAL_KIND VARCHAR2(500),
	ANIMAL_AGE NUMBER,
	ANIMAL_FEED VARCHAR2(500)
);

SELECT *FROM TBL_ANIMAL ;

/*제약조건 추가 (PK)*/
ALTER TABLE TBL_ANIMAL ADD CONSTRAINT PK_ANIMAL PRIMARY KEY(ANIMAL_NUMBER);
/*제약조건 삭제*/
ALTER TABLE TBL_ANIMAL DROP CONSTRAINT PK_ANIMAL;
/*컬럼 추가(성별)*/
ALTER TABLE TBL_ANIMAL ADD(ANIMAL_GENDER CHAR(4));

/*컬럼 이름수정(고유번호)*/
ALTER TABLE TBL_ANIMAL RENAME COLUMN ANIMAL_NUMBER TO ANIMAL_NUM;

/*컬럼 삭제(먹이)*/
ALTER TABLE TBL_ANIMAL DROP COLUMN ANIMAL_FEED;

/*컬럼 수정(종류 컬럼을 다른 자료형으로)*/
ALTER TABLE TBL_ANIMAL MODIFY(ANIMAL_KIND NUMBER);

/*동물 테이블 삭제*/
DROP TABLE TBL_ANIMAL ;

/* 
 * 상품 테이블 생성 (PRODUCT)
 * 
 * 제약조건 PK를 설정
 * - 상품 번호
 * - 이름
 * - 가격
 *  */
DROP TABLE TBL_PRODUCT ;
CREATE TABLE TBL_PRODUCT (
	PRODUCT_NUMBER NUMBER,
	PRODUCT_NAME VARCHAR2(1000),
	PRODUCT_PRICE NUMBER
);
 
ALTER TABLE TBL_PRODUCT ADD CONSTRAINT PK_PRODUCT PRIMARY KEY(PRODUCT_NUMBER);

SELECT *FROM TBL_PRODUCT ;

INSERT INTO TBL_PRODUCT tp 
VALUES(1, 'iphone15', 1700000);
INSERT INTO TBL_PRODUCT tp 
VALUES(1, 'iphone15 pro', 180000);  --상품번호가 pk라 중복허용x
INSERT INTO TBL_PRODUCT tp 
VALUES(null, 'iphone15', 1700000); -- 상품번호가 pk라 NULL 허용x

/*학교 
 * 고유번호
 *이름*/
DROP TABLE TBL_SCHOOL;
CREATE TABLE TBL_SCHOOL(
	SCHOOL_NUMBER NUMBER ,
	SCHOOL_NAME VARCHAR2(1000),
	CONSTRAINT PK_SCHOOL PRIMARY KEY (SCHOOL_NUMBER)
);

SELECT *FROM TBL_SCHOOL;

DROP TABLE TBL_STUDENT ;

CREATE TABLE TBL_STUDENT(
	STUDENT_NUMBER NUMBER,
	STUDENT_NAME VARCHAR2(1000),
	STUDENT_AGE NUMBER,
	SCHOOL_NUMBER,
	CONSTRAINT PK_STUDENT PRIMARY KEY(STUDENT_NUMBER),
	CONSTRAINT FK_STUDENT FOREIGN KEY(SCHOOL_NUMBER)
	REFERENCES TBL_SCHOOL(SCHOOL_NUMBER)
);

/*학교 테이블에 데이터 넣기*/
INSERT INTO TBL_SCHOOL ts VALUES(3, '기흥고');
INSERT INTO TBL_SCHOOL ts VALUES(2, '신갈고');
INSERT INTO TBL_SCHOOL ts VALUES(1, '성지고');

SELECT *FROM TBL_SCHOOL ts ;
INSERT INTO TBL_STUDENT ts VALUES(1, '철수', 20,5); -- 부모테이블에 없는 PK
INSERT INTO TBL_STUDENT ts VALUES(1, '철수', 20,1);
INSERT INTO TBL_STUDENT ts VALUES(2, '영희', 20,2);
INSERT INTO TBL_STUDENT ts VALUES(3, '영희', 20,2);
INSERT INTO TBL_STUDENT ts VALUES(4, '진영', 20, NULL);

SELECT *FROM TBL_STUDENT ts ;

DROP TABLE TBL_STUDENT ;
CREATE  TABLE TBL_STUDENT(
	STUDENT_NUMBER NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
	STUDENT_ID VARCHAR2(1000) CONSTRAINT UK_STUDENT UNIQUE, -- UNIQUE는 KEY를 붙이지 않음 
	STUDENT_NAME VARCHAR2(1000),
	STUDENT_MAJOR VARCHAR2(1000),
	STUDENT_GENDER CHAR(1) DEFAULT 'W' NOT NULL,
	CONSTRAINT CHECK_GENDER
	CHECK(STUDENT_GENDER='W' OR STUDENT_GENDER='M')
	);

SELECT *FROM TBL_STUDENT;
INSERT INTO TBL_STUDENT VALUES(1,'AA', '짱구','컴공','M');
INSERT INTO TBL_STUDENT VALUES(2,'AA', '짱구','컴공','M'); -- ID는 UK
INSERT INTO TBL_STUDENT VALUES(2,'BB', '짱구','컴공','M');
INSERT INTO TBL_STUDENT (STUDENT_NUMBER,STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR)
INSERT INTO TBL_STUDENT VALUES(3,'CC', '유리','컴공');

/*조합키*/
DROP TABLE TBL_FLOWER;
CREATE TABLE TBL_FLOWER(
	FLOWER_NAME VARCHAR2(1000),
	FLOWER_COLOR VARCHAR(1000),
	FLOWER_PRICE NUMBER,
	CONSTRAINT PK_FLOWER PRIMARY KEY(FLOWER_NAME, FLOWER_COLOR)
); 
SELECT*FROM TBL_FLOWER;
INSERT INTO TBL_FLOWER VALUES('장미','빨강',5000);
INSERT INTO TBL_FLOWER VALUES('장미','검정',10000);
INSERT INTO TBL_FLOWER VALUES('장미','검정',10000); -- 조합키 2개의 컬럼이 모두 일치
INSERT INTO TBL_FLOWER VALUES('해바라기','검정',10000); -- 조합키 2개의 컬럼이 모두 일치



DROP TABLE TBL_PHONE;
CREATE TABLE TBL_PHONE(
   PHONE_SERIAL_NUMBER  VARCHAR2(1000),
   PHONE_COLOR VARCHAR2(1000) NOT NULL,
   PHONE_SIZE NUMBER,
   PHONE_PRICE NUMBER NOT NULL,
   PHONE_PRODUCTION_DATE DATE  NOT NULL,
   CONSTRAINT PK_PHONE PRIMARY KEY(PHONE_SERIAL_NUMBER)
);


 CREATE TABLE TBL_CASE(  
   CASE_SERIAL_NUMBER VARCHAR2(1000),
   CASE_COLOR VARCHAR2(1000) NOT NULL,
   CASE_PRICE NUMBER NOT NULL,
   PHONE_SERIAL_NUMBER VARCHAR2(1000),
   CONSTRAINT PK_CASE PRIMARY KEY(CASE_SERIAL_NUMBER),
   CONSTRAINT FK_CASE FOREIGN KEY(PHONE_SERIAL_NUMBER)
   REFERENCES TBL_PHONE (PHONE_SERIAL_NUMBER)
);

/*실습

   1. 요구사항 분석

   - 도서관에서 회원의 정보와 책의 정보가 필요하다.
   - 회원의 정보는 회원번호, 이름, 나이, 핸드폰 번호, 주소가 필요하고
   - 책의 정보는 도서번호, 책이름, 장르가 필요하다.
   - 단, 장르는 인문학, 추리, IT, 로맨스
   - 한 명의 회원은 여러 권의 책을 빌릴 수 있다.
   - 테이블 명은 TBL_LIBRARY_USER, TBL_BOOK으로 한다.*/

/* [실습] */
DROP TABLE TBL_LIBRARY_USER;
DROP TABLE TBL_BOOK;
CREATE TABLE TBL_LIBRARY_USER(
   USER_ID NUMBER ,
   USER_NAME VARCHAR2(1000) NOT NULL,
   USER_AGE NUMBER,
   USER_PHONE_NUMBER VARCHAR2(1000) NOT NULL,
   USER_ADDRESS VARCHAR2(1000) NOT NULL,
   CONSTRAINT PK_LIBRARY_USER PRIMARY KEY (USER_ID),
   CONSTRAINT UK_LIBRARY_USER UNIQUE (USER_PHONE_NUMBER)
);

CREATE TABLE TBL_BOOK(
   BOOK_ID NUMBER,
   BOOK_NAME VARCHAR2(1000) NOT NULL,
   BOOK_CATEGORY VARCHAR2(1000),
   USER_ID NUMBER,
   CONSTRAINT PK_BOOK PRIMARY KEY (BOOK_ID),
   CONSTRAINT FK_BOOK FOREIGN KEY (USER_ID)
   REFERENCES TBL_LIBRARY_USER (USER_ID),
   CONSTRAINT CHECK_BOOK_CATEGORY
   CHECK (BOOK_CATEGORY IN ('인문학', '추리', 'IT', '로맨스'))
);
